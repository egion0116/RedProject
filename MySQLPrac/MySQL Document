이 파일은 MySQL에서 제공하는 문서를 번역한 파일입니다.

28.7.1 MySQL C API의 구현체들
MySQL C API는 C로 쓰여진 클라이언트 어플리케이션들이 MySQL Server와 통신하는데 쓰일수 있는 C기반 API입니다.
클라이언트 프로그램들은 C API 헤더파일을 컴파일타임에 참조해야하고, libmysqlclient 라이브러리 파일을 링크타임에 참조해야합니다.

C API 클라이언트 프로그램들을 빌드하기위해 필요한 C API헤더와 라이브러리를 얻기위한 2가지 방법이 있습니다.

    1. MySQL Server 배포판을 설치한다.
    2. Connector/C 배포판을 설치한다.

두가지 방법 모두 선 빌드된 C API 바이너리 배포판을 설치할 수 있습니다. 또한 소스파일 배포판을 받아 직접 C API파일들을 빌드하는 방법을 사용할 수도 있습니다.

보통은, MySQL Server 배포판을 설치하고나 Connector/C 배포판을 설치하는 방법을 택할 것 입니다. (두가지 방법 모두 택하는것은 제외합시다.)
두가지 모두 선택하는 경우에 대해서는 해당 자료가 28.7.2 섹션에 있으니 참조하시기 바랍니다.

C API 클라이언트 어플리케이션들을 링킹시 라이브러리 파일들을 사용하기 위한 이름들은 라이브러리 타입과 배포판이 빌드된 플렛폼에 의존합니다.

    1. UNIX나 UNIX-LIKE 의 경우
        정적 라이브러리의 이름은
            libmysqlclient.a
        동적 라이브러리의 이름은
            libmysqlclient.so가 대부분의 UNIX 시스템에서 사용되고, 
            맥의경우 libmysqlclient.dylib가 쓰입니다.
    
    2. 윈도우의 경우
        정적 라이브러리의 이름은
            libmysqlclient.lib
        동적라이브러리의 이름은
            libmysqlclient.dll 입니다.
        윈도우 배포판은 동적 라이브러리를 사용하기 위해 필요한 정적 라이브러리 libmysql.lib를 포함시킵니다.
        
        뿐만아니라 debug 라이브러리 세트를 추가로 include 시킵니다. 이 라이브러리들은 nondebug 라이브러리들과 같은 이름을 지니고 있지만, lib/debug 파일내에 위치하고 있습니다.
        사용자는 반드시 디버그 라이브러리를 컴파일시 추가해야합니다.

        
        
28.7.2 MySQL Server와 Connector/C를 동시에 설치할 경우

MySQL Server와 Connector/C 설치 패키지들은 모두 MySQL C API 클라이언트 프로그램들을 빌드하고 실행할 수 있는 파일들을 제공합니다.
이번 섹션에서는 두 제품을 모두 같은 시스템에 설치했을 경우에 대해 의논합니다. 
일부 패키징 형식의 경우에 충돌을 전혀 야기하지 않지만 일부 패키징 포멧은 충돌을 유발하기도 하므로 주의가 필요합니다.

이번 의논은 두 제품에 대하여 같은 패키지 타입을 사용한것으로 간주합니다.(예를들어 RPM 패키지들을 두 제품에 적용시켰다거나하는 경우입니다.)
서로다른 패키지 타입이 공존하는 경우에 대해서는 논하지 않습니다. (예를들면 하나는 RPM 패키지를 이용하고 다른쪽은 tar 파일 패키지를 이용했을 경우입니다.)
오라클에 의해 제공된 패키지와 제3자 제공 패키지와의 공존 역시 다루지 않을것 입니다.

만약 사용자가 두 제품을 모두 설치하였을 경우, 개발환경과 실행환경의 수정(헤더파일과 라이브러리파일의 선택)이 불가피할 수 있습니다.
섹션 28.7.4.1 C API 클라이언트 프로그램 빌드하기 섹션과 28.7.4.4 C API 클라이언트 프로그램 실행하기를 참조해주세요.

tar 와 Zip파일은 사용자가 언팩한 디렉토리 아래에 패키지들을 설치합니다.
예를들어 MySQL Server와 Connector/C tar 패키지들을 
    /usr/local
에 언팩할 수 있고, tar는 그대로 충돌없이 패키지를 설치할 수 있습니다.

윈도우 MSI 인스톨러의 경우 설치 디렉토리가 따로 존재하기 때문에 충돌을 우려할 필요가 없습니다.

OS X DMG 패키지 관리자의 경우 같은 부모 디렉토리지만, 다른 서브디렉토리에 설치가 되므로 충돌을 우려할 필요가 없습니다.

RPM의 경우 설치 디렉터리가 겹치므로 둘중에 하나는 지워야합니다.

